//
// Layouts Sizes Tools
//

//
// rkrMxSizesPlaceholder
//
@mixin rkrMxSizesPlaceholder ($_inName, $_inVal) {

  %#{$_inName} {
    width: #{$_inVal + '%'};
  }

}



//
// rkrMxSizesSilent
//
@mixin rkrMxSizesSilent() {
  
  $lDefined: ();

  @each $group in $rkrSizesLGroups {

    @if $group == 1 {

      /* 
       * Size full 
       */
      @include rkrMxSizesPlaceholder (lSize-100, 100);

      @if $rkrSizesBResponsive {

        @each $type,$name in $rkrRwdMBreakpointsNames {

          @include rkrMxResponsive((from: $type)) {  

            /* Size full #{$type} */
            @include rkrMxSizesPlaceholder (rkrFnBEM(lSize-100, $type, false), 100);

          }

        } // @each

      } // @if responsive

    }

    @for $i from 1 to $group {

      $currentSize: $i / $group * 100;
      $selector: round($currentSize);

      @if index($lDefined, $selector) == null {

        /* 
         * Size #{$selector} base 
         */
        @include rkrMxSizesPlaceholder (lSize-#{$selector}, $currentSize);

        @if $rkrSizesBResponsive {

          @each $type,$name in $rkrRwdMBreakpointsNames {

            @include rkrMxResponsive((from: $type)) {  

              /* Size #{$selector} #{$type} */
              @include rkrMxSizesPlaceholder (rkrFnBEM(lSize-#{$selector}, $type, false), $currentSize);

            }

          } // @each

        } // @if responsive

        $lDefined: append($lDefined, $selector);

      } // @if index

    } // @for in group

  } // @each $group

}// @mixin



//
// rkrMxSizesRule
//
@mixin rkrMxSizesRule($_inRule, $_inParam, $type: '') {

  $placeholder: lSize-#{$_inParam};

  @if $type != '' {

    $placeholder: rkrFnBEM($placeholder, $type, false);

  }

  @include rkrMxAttribute(size, $_inRule) {
    @extend %#{$placeholder};
  }

}// @mixin



//
// rkrMxSizesOutput
//
@mixin rkrMxSizesOutput() {
  
  @each $group in $rkrSizesLGroups {

    @if $group == 1 {

      @include rkrMxSizesRule(rkrFnBEM(#{$rkrSizesNs}, '1/1', false), 100);

      @if $rkrSizesBResponsive {

        @each $type,$name in $rkrRwdMBreakpointsNames {

          @include rkrMxResponsive((from: $type)) {

            @include rkrMxSizesRule(rkrFnBEM(#{$rkrSizesNs}-#{$name}, '1/1', false), 100, $type);

          }

        }// @each breakpoint

      }// @if responsive


    }

    @for $i from 1 to $group {

      $selector: round($i / $group * 100);      

      $rule: rkrFnBEM(#{$rkrSizesNs}, #{$i}/#{$group}, false);

      @include rkrMxSizesRule($rule, $selector);

      // Generate responsive rules
      @if $rkrSizesBResponsive {

        @each $type,$name in $rkrRwdMBreakpointsNames {

          @include rkrMxResponsive((from: $type)) {

		      	$rwdRule: rkrFnBEM(#{$rkrSizesNs}-#{$name}, #{$i}/#{$group}, false);

            @include rkrMxSizesRule($rwdRule, $selector, $type);

          }

        }// @each breakpoint

      }// @if responsive

    }// @for in group

  }// @each group

}// @mixin