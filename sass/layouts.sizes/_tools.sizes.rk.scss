//
// Layouts Sizes Tools
//

//
// rkrMxSizesPlaceholder
//
@mixin rkrMxSizesPlaceholder ($_inName, $_inVal) {

  %#{$_inName} {
    width: #{$_inVal + '%'};
  }

}



//
// rkrMxSizesSilent
//
@mixin rkrMxSizesSilent() {
  
  $lDefined: ();

  @each $group in $rkrSizesLGroups {

    @for $i from 1 to $group {

      $currentSize: $i / $group * 100;
      $selector: round($currentSize);

      @if index($lDefined, $selector) == null {

        /* Size #{$selector} base */
        @include rkrMxSizesPlaceholder (lSize-#{$selector}, $currentSize);

        @if $rkrSizesBResponsive {

          @each $type,$name in $rkrRwdMBreakpointsNames {

            @include rkrMxResponsive((from: $type)) {  

              /* Size #{$selector} #{$type} */
              @include rkrMxSizesPlaceholder (rkrFnBEM(lSize-#{$selector}, $type, false), $currentSize);

            }

          } // @each

        } // @if responsive

        $lDefined: append($lDefined, $selector);

      } // @if index

    } // @for in group

  } // @each $group

}// @mixin



//
// rkrMxSizesRule
//
@mixin rkrMxSizesRule($_inRule, $_inParam, $type: '') {

  $placeholder: lSize-#{$_inParam};

  @if $type != '' {

    $placeholder: rkrFnBEM($placeholder, $type, false);

  }

  @include rkrMxAttribute(size, $_inRule) {
    @extend %#{$placeholder};
  }

}// @mixin



//
// rkrMxSizesOutput
//
@mixin rkrMxSizesOutput() {
  
  @each $group in $rkrSizesLGroups {

    @for $i from 1 to $group {

      $selector: round($i / $group * 100);      

      $rule: #{$rkrSizesNs}--#{$i}/#{$group};

      @include rkrMxSizesRule(#{$rkrSizesNs}--#{$i}/#{$group}, $selector);

      @if $rkrSizesBResponsive {

        @each $type,$name in $rkrRwdMBreakpointsNames {

          @include rkrMxResponsive((from: $type)) {

            @include rkrMxSizesRule($rule, $selector, $type);

          }

        }// @each breakpoint

      }// @if responsive

    }// @for in group

  }// @each group

}// @mixin