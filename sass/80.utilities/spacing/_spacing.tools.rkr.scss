//
// Spacing tools
//



@mixin rkrSpacingMarginSide($_inSide, $_inValue) {
  @if $_inSide == "horizontal" {
    margin-left:   $_inValue !important;
    margin-right:  $_inValue !important;
  }
  @if $_inSide == "vertical" {
    margin-top:    $_inValue !important;
    margin-bottom: $_inValue !important;
  }
}

@mixin rkrSpacingPaddingSide($_inSide, $_inValue) {
  @if $_inSide == "horizontal" {
    padding-left:   $_inValue !important;
    padding-right:  $_inValue !important;
  }
  @if $_inSide == "vertical" {
    padding-top:    $_inValue !important;
    padding-bottom: $_inValue !important;
  }
}



//
// Mixin that generates margings modifiers
//
@mixin rkrSpacingMargins() {

  $marginModifiers: (
    at:    auto,
    no:    0,
    xs:   .4rem,
    sm:   .8rem,
    md:    1rem,
    lg:  1.5rem,
    xl:    2rem
  );

  $rkrSpacingTokenTop: (
    top: $rkrSpacingTokenTop,
    right: $rkrSpacingTokenRight,
    bottom: $rkrSpacingTokenBottom,
    left: $rkrSpacingTokenLeft
  );

  @each $mod,$v in $marginModifiers {
    $bemModifier: (
      block: $rkrSpacingTokenMargin,
      modifier: $mod
    );

    #{rkrRuleBEM($rkrSpacingEntity, $bemModifier)} { margin: $v !important; }



    /* Margin Types */
    @each $mType, $mToken in $rkrSpacingTokenTop {
      $bemModifier: (
          block: $rkrSpacingTokenMargin,
          modifier: $mToken + capitalize($mod)
      );

      #{rkrRuleBEM($rkrSpacingEntity, $bemModifier)} { margin-#{$mType}: $v !important; }
    }



    /* Margin Sides */
    @each $name,$side in $rkrMarginSides {
        $bemSide: (
            block: $rkrSpacingTokenMargin,
            modifier: $side + capitalize($mod)
        );

        #{rkrRuleBEM($rkrSpacingEntity, $bemSide)} { @include rkrSpacingMarginSide($name, $v); }
    }
  }
}



//
// Mixin that generates paddings modifiers
//
@mixin rkrSpacingPaddings() {

  $paddingModifiers: (
    no:    0,
    xs:   .4rem,
    sm:   .8rem,
    md:    1rem,
    lg:  1.5rem,
    xl:    2rem
  );

  $paddingTypes: (
    top: $rkrSpacingTokenTop,
    right: $rkrSpacingTokenRight,
    bottom: $rkrSpacingTokenBottom,
    left: $rkrSpacingTokenLeft
  );

  @each $mod,$v in $paddingModifiers {
    $bemModifier: (
      block: $rkrSpacingTokenPadding,
      modifier: $mod
    );

    #{rkrRuleBEM($rkrSpacingEntity, $bemModifier)} { padding: $v !important; }



    /* Margin Types */
    @each $mType, $mToken in $paddingTypes {
      $bemModifier: (
          block: $rkrSpacingTokenPadding,
          modifier: $mToken + capitalize($mod)
      );

      #{rkrRuleBEM($rkrSpacingEntity, $bemModifier)} { padding-#{$mType}: $v !important; }
    }



    /* Margin Sides */
    @each $name,$side in $rkrMarginSides {
        $bemSide: (
            block: $rkrSpacingTokenPadding,
            modifier: $side + capitalize($mod)
        );

        #{rkrRuleBEM($rkrSpacingEntity, $bemSide)} { @include rkrSpacingPaddingSide($name, $v); }
    }
  }
}