//
// Media mixins
//

//
// fnRuleMO
// Generate Media Object related rule
//
@function fnRuleMO($_inAttr, $_inIsElem: true) {

//  $param: fnBEM(' ', $_inAttr, $_inIsElem);
  $prefix: '-';
  @if $_inIsElem {
    $prefix: '_';
  }

  $param: $rkrNsMedia + $prefix + $_inAttr;
  $response: fnAttributeRule(media, $param);

  @return $response;

}


//
// mxMediaModifiers
// Generate media modifiers
//

@mixin mxMediaModifiers() {

  $rkrMapMediaSpacing: fnModifiersMap(5px, 5px, false);

  @each $key,$val in $rkrMapMediaSpacing {

    /* Media object base with #{$key} modifier */
    #{fnRuleMO(map-get($rkrModifiersNaming, $key), false)} {

      > #{fnRuleMO(img)}
      { margin-right: $val; }

      &#{fnRuleMO(rev, false)} {
        > #{fnRuleMO(img)} {
          margin-right: 0;
          margin-left: $val;
        }
      }

      &#{fnRuleMO($rkAttrNameMediaBlock, false)} {
        > #{fnRuleMO(img)}
        { margin-bottom: $val; }
        
        &#{fnRuleMO(rev, false)} {
          > #{fnRuleMO(img)} {
            margin-bottom: 0;
            margin-top: $val;
          }
        }
      }

    }

  }

}
