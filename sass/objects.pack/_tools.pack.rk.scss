//
// Pack object funtions
//

//
// fnRulePack
// Generate Pack Object related rule
//
@function fnRulePack($_inAttr, $_inIsElem: true) {

  $response: fnAttributeRule(pack, null);

  @if $_inAttr != null {
    $prefix: '-';
    @if $_inIsElem {
      $prefix: '_';
    }

    $param: $prefix + $_inAttr;
    $response: fnAttributeRule(pack, $param);

  }

  @return $response;

}


//
// mxMediaModifiers
// Generate media modifiers
//

@mixin mxPackModifiers() {

  $rkPackMediaSpacing: fnModifiersMap(5px, 5px);

  @each $key,$val in $rkPackMediaSpacing {

    /* Pack Object with '#{$key}' modifier */
    #{fnRulePack(map-get($rkModifiersNaming, $key), false)} {
      border-spacing: $val;
    }
  }
}
